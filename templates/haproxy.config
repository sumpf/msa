#-----------------------------------------------------------------------------
# Global settings
#-----------------------------------------------------------------------------
global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        maxconn 100000
#        nbproc  1

        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
        ssl-default-bind-options no-sslv3 no-tlsv10
        ssl-default-bind-options no-sslv3
        tune.ssl.default-dh-param 2048
        tune.ssl.cachesize      100000
        tune.ssl.lifetime       600
        tune.bufsize 1638400
        tune.http.maxhdr 10000

#-----------------------------------------------------------------------------
# Defaults settings
#-----------------------------------------------------------------------------
defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 30s
        timeout client  60s
        timeout server  60s
        maxconn 10000
        option  http-server-close
        retries 3
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http



#-----------------------------------------------------------------------------
#  HAproxy Metric Setting
#-----------------------------------------------------------------------------
frontend metric
        bind    *:8556
#        option  http-use-htx
        http-request use-service prometheus-exporter if { path /metrics }
        stats   enable
        stats   uri /metrics
        stats   refresh 10s
#-----------------------------------------------------------------------------
#  Frontend Setting(http-sample.com)
#-----------------------------------------------------------------------------
frontend haproxy_server_https
        mode        http
        bind        0.0.0.0:80
        bind        0.0.0.0:443 ssl crt /opt/ssl/certbot.pem alpn h2,http/1.1
        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        http-request set-header X-Forewared-Proto http if !{ ssl_fc }
        redirect scheme https if !{ ssl_fc }
        acl tls req.ssl_hello_type 1

        #-----------------------------------#
        #             Frontend              #
        #-----------------------------------#

        # Proxy
        acl cluster-haproxy  hdr_end(host) -i haproxy.sample.com
        
        # Rancher
        acl cluster-rancher hdr_end(host) -i rancher.sample.com

        # CI/CD
        acl cluster-harbor hdr_end(host) -i harbor.sample.com
        acl cluster-gitlab hdr_end(host) -i gitlab.sample.com
        acl cluster-argocd hdr_end(host) -i argocd.sample.com
        acl cluster-nexus hdr_end(host) -i nexus.sample.com
        acl cluster-sonarqube hdr_end(host) -i sonarqube.sample.com

        # Storage
        acl cluster-rook hdr_end(host) -i rook.sample.com

        # Cache
        # acl cluster-redisinsight hdr_end(host) -i redisinsight.sample.com

        # API
        acl cluster-keycloak hdr_end(host) -i keycloak.sample.com
        acl cluster-konga hdr_end(host) -i konga.sample.com
        
        # Service Mesh
        acl cluster-jaeger hdr_end(host) -i jaeger.sample.com
        acl cluster-kiali hdr_end(host) -i kiali.sample.com
        
        # Monitoring
        acl cluster-alert hdr_end(host) -i alert.sample.com
        acl cluster-grafana hdr_end(host) -i grafana.sample.com
        acl cluster-prometheus hdr_end(host) -i prometheus.sample.com
        
        # Axon Server
        # acl cluster-axon hdr_end(host) -i axon.sample.com
        
        # Logging
        acl cluster-kibana hdr_end(host) -i kibana.sample.com
        
        # Developer
        acl cluster-frontend hdr_end(host) -i frontend.sample.com


        #-----------------------------------#
        #             Backend               #
        #-----------------------------------#
        # Kubernetes
        use_backend v0-cluster-haproxy if cluster-haproxy
        use_backend v0-cluster-rancher if cluster-rancher
        # CI/CD
        use_backend v0-cluster-harbor if cluster-harbor
        use_backend v0-cluster-gitlab if cluster-gitlab
        use_backend v0-cluster-argocd if cluster-argocd
        use_backend v0-cluster-nexus if cluster-nexus
        use_backend v0-cluster-sonarqube if cluster-sonarqube
        # Storage
        use_backend v0-cluster-rook if cluster-rook
        # Cache
        use_backend v0-cluster-redisinsight if cluster-redisinsight

        # API
        use_backend v0-cluster-konga if cluster-konga
        use_backend v0-cluster-keycloak if cluster-keycloak
        # Service Mesh
        use_backend v0-cluster-jaeger if cluster-jaeger
        use_backend v0-cluster-kiali if cluster-kiali
        # Monitoring
        use_backend v0-cluster-alert if cluster-alert
        use_backend v0-cluster-grafana if cluster-grafana
        use_backend v0-cluster-prometheus if cluster-prometheus
        # Axon Server
        use_backend v0-cluster-axon if cluster-axon
        # Logging
        use_backend v0-cluster-kibana if cluster-kibana
        # Developer
        use_backend v0-cluster-frontend if cluster-frontend
        # Cloudify
        use_backend v0-cluster-cloudify if cluster-cloudify

#-----------------------------------------------------------------------------
# Kubernets API Server Setting
#-----------------------------------------------------------------------------
frontend kube_apiserver
        bind    0.0.0.0:6443
        mode    tcp
        default_backend kube_apiserver_backend

backend kube_apiserver_backend
        mode    tcp
        balance leastconn
        server m1  {master_node01}:6443 check inter 3000 rise 2 fall 2
        server m2  {master_node02}:6443 check inter 3000 rise 2 fall 2
        server m3  {master_node03}:6443 check inter 3000 rise 2 fall 2
        # next add

#-----------------------------------------------------------------------------
# GitLab API Server Setting
#-----------------------------------------------------------------------------
frontend gitlab_ssh
        bind    *:8022
        mode    tcp
        default_backend gitlab_ssh_backend

backend gitlab_ssh_backend
        mode    tcp
        server  mg2 192.168.0.103:22 check port 22

#-----------------------------------------------------------------------------
# Backend Setting
#-----------------------------------------------------------------------------
## Kubernetes ##
# haproxy
backend v0-cluster-haproxy
        stats   uri /
        stats   hide-version
        stats   auth admin:1234qwer!
        stats   enable
        stats   show-node
        stats   refresh 5s

# rancher
backend v0-cluster-rancher
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  r1 {rancher_master01}:443 check ssl verify none

## CI/CD ##
# harbor
backend v0-cluster-harbor
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  mg2 192.168.0.103:7776 check ssl verify none
# gitlab
backend v0-cluster-gitlab
        mode    http
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  mg2 192.168.0.103:7775 check

# argocd
backend v0-cluster-argocd
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:443 check ssl verify none
        server  w2 {worker_node02}:443 check ssl verify none
        server  w3 {worker_node03}:443 check ssl verify none

# nexus
backend v0-cluster-nexus
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  mg2 192.168.0.103:8083 check

# sonarqube
backend v0-cluster-sonarqube
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  mg2 192.168.0.103:9000 check

## Storage ##
# rook
backend v0-cluster-rook
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:443 check ssl verify none
        server  w2 {worker_node02}:443 check ssl verify none
        server  w3 {worker_node03}:443 check ssl verify none

# Object Storage
frontend object_storage
        bind    0.0.0.0:32541
        mode    http
        default_backend object_storage

backend object_storage
        mode    http
        balance roundrobin
        server  w1 {worker_node01}:32541 check
        server  w2 {worker_node02}:32541 check
        server  w3 {worker_node03}:32541 check

## API ##
# KongA
backend v0-cluster-konga
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:80 check
        server  w2 {worker_node02}:80 check
        server  w3 {worker_node03}:80 check

# kongAPI
backend v0-cluster-frontend
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:31443 check ssl verify none
        server  w2 {worker_node02}:31443 check ssl verify none
        server  w3 {worker_node03}:31443 check ssl verify none

# keycloak
backend v0-cluster-keycloak
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:443 check ssl verify none
        server  w2 {worker_node02}:443 check ssl verify none
        server  w3 {worker_node03}:443 check ssl verify none

## Service Mesh ##
# jaeger
backend v0-cluster-jaeger
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:30002 check
        server  w2 {worker_node02}:30002 check
        server  w3 {worker_node03}:30002 check

# kiali
backend v0-cluster-kiali
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:30003 check
        server  w2 {worker_node01}:30003 check
        server  w3 {worker_node01}:30003 check

## Monitoring
# alertmanager
backend v0-cluster-alert
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:443 check ssl verify none
        server  w2 {worker_node02}:443 check ssl verify none
        server  w3 {worker_node03}:443 check ssl verify none

# grafana
backend v0-cluster-grafana
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:443 check ssl verify none
        server  w2 {worker_node02}:443 check ssl verify none
        server  w3 {worker_node03}:443 check ssl verify none

# prometheus
backend v0-cluster-prometheus
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  w1 {worker_node01}:443 check ssl verify none
        server  w2 {worker_node02}:443 check ssl verify none
        server  w3 {worker_node03}:443 check ssl verify none

## Logging
# Kibana
backend v0-cluster-kibana
        mode    http
        option  tcp-check
        balance roundrobin
        cookie  SERVERID insert indirect nocache
        server  mg1 {worker_node01}:5601 check

